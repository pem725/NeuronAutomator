---
title: "Neuron Daily Newsletter Automation - Demo & Testing"
author: "System Administrator"
date: "`r Sys.Date()`"
format: 
  html:
    toc: true
    toc-depth: 3
    code-fold: false
    theme: cosmo
execute:
  echo: true
  warning: false
  message: false
---

## Overview

This document demonstrates the Neuron Daily Newsletter Automation system and provides testing procedures for validating the installation.

## System Architecture

```{mermaid}
graph TD
    A[Systemd Timer] -->|Weekdays 8:00 AM| B[neuron-automation.service]
    B --> C[Python Script]
    C --> D[Check Weekday]
    D -->|Yes| E[Check Internet]
    D -->|No| F[Exit]
    E -->|Connected| G[Setup Chrome WebDriver]
    E -->|No Connection| H[Log Error & Retry]
    G --> I[Load Newsletter Page]
    I --> J[Extract Article Links]
    J --> K[Filter Relevant Links]
    K --> L[Open Chrome with All Tabs]
    L --> M[Success]
    
    H --> G
```

## Installation Verification

Let's verify the installation step by step:

```{bash}
#| eval: false
#| echo: true

# Check if the main command is available
which neuron-automation

# Verify system service status
systemctl status neuron-automation.timer --no-pager

# Check configuration directory
ls -la ~/.config/neuron-automation/
```

## Testing the Core Functionality

### 1. Python Environment Test

```{python}
#| eval: false

import sys
import os
from pathlib import Path

# Add the configuration directory to Python path
config_dir = Path.home() / '.config' / 'neuron-automation'
sys.path.insert(0, str(config_dir))

# Test imports
try:
    from selenium import webdriver
    from webdriver_manager.chrome import ChromeDriverManager
    import requests
    from bs4 import BeautifulSoup
    print("‚úÖ All Python dependencies imported successfully")
except ImportError as e:
    print(f"‚ùå Import error: {e}")

# Test configuration loading
try:
    from config import ACTIVE_CONFIG
    ACTIVE_CONFIG.validate_config()
    print("‚úÖ Configuration validation passed")
    print(f"Base URL: {ACTIVE_CONFIG.BASE_URL}")
    print(f"Enabled days: {ACTIVE_CONFIG.ENABLED_DAYS}")
except Exception as e:
    print(f"‚ùå Configuration error: {e}")
```

### 2. Network Connectivity Test

```{python}
#| eval: false

import requests
import time

def test_connectivity():
    """Test network connectivity to required URLs."""
    urls_to_test = [
        "https://www.google.com",
        "https://www.theneurondaily.com/",
        "https://chromedriver.chromium.org/"
    ]
    
    results = {}
    
    for url in urls_to_test:
        try:
            start_time = time.time()
            response = requests.get(url, timeout=10)
            elapsed = time.time() - start_time
            
            results[url] = {
                'status': response.status_code,
                'time': f"{elapsed:.2f}s",
                'success': response.status_code == 200
            }
            
        except requests.RequestException as e:
            results[url] = {
                'status': 'Error',
                'time': 'N/A',
                'success': False,
                'error': str(e)
            }
    
    # Display results
    print("Network Connectivity Test Results:")
    print("=" * 50)
    
    for url, result in results.items():
        status = "‚úÖ" if result['success'] else "‚ùå"
        print(f"{status} {url}")
        print(f"   Status: {result['status']}")
        print(f"   Time: {result['time']}")
        if 'error' in result:
            print(f"   Error: {result['error']}")
        print()

# Run the test
test_connectivity()
```

### 3. Chrome WebDriver Test

```{python}
#| eval: false

import sys
from pathlib import Path
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager

def test_webdriver():
    """Test Chrome WebDriver functionality."""
    config_dir = Path.home() / '.config' / 'neuron-automation'
    sys.path.insert(0, str(config_dir))
    
    try:
        from config import ACTIVE_CONFIG
        
        print("üß™ Testing Chrome WebDriver...")
        
        # Setup Chrome options
        options = Options()
        options.add_argument('--headless')  # Run in background
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        
        # Initialize WebDriver
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=options)
        
        print("‚úÖ WebDriver initialized successfully")
        
        # Test basic navigation
        driver.get("https://www.google.com")
        print(f"‚úÖ Successfully loaded Google (title: {driver.title})")
        
        # Test the actual newsletter site
        driver.get(ACTIVE_CONFIG.BASE_URL)
        print(f"‚úÖ Successfully loaded {ACTIVE_CONFIG.BASE_URL}")
        print(f"   Page title: {driver.title}")
        
        # Test link extraction
        links = driver.find_elements("tag name", "a")
        print(f"‚úÖ Found {len(links)} links on the newsletter page")
        
        # Clean up
        driver.quit()
        print("‚úÖ WebDriver test completed successfully")
        
        return True
        
    except Exception as e:
        print(f"‚ùå WebDriver test failed: {e}")
        if 'driver' in locals():
            try:
                driver.quit()
            except:
                pass
        return False

# Run the WebDriver test
test_webdriver()
```

## System Integration Testing

### Service Status Check

```{bash}
#| eval: false

echo "üîç Checking System Integration..."

# Check if service files exist
echo "Service files:"
ls -la /etc/systemd/system/neuron-automation.*

# Check timer status
echo -e "\n‚è∞ Timer Status:"
systemctl status neuron-automation.timer --no-pager -l

# Check when timer will run next
echo -e "\nüìÖ Next scheduled runs:"
systemctl list-timers neuron-automation.timer --no-pager

# Check service logs (last 20 lines)
echo -e "\nüìã Recent service logs:"
journalctl -u neuron-automation.service -n 20 --no-pager || echo "No logs yet (service hasn't run)"
```

### Configuration Review

```{python}
#| eval: false

import sys
from pathlib import Path
import json
from datetime import datetime

config_dir = Path.home() / '.config' / 'neuron-automation'
sys.path.insert(0, str(config_dir))

from config import ACTIVE_CONFIG

print("üìã Current Configuration Review")
print("=" * 40)

# Display key configuration values
config_items = [
    ('Base URL', ACTIVE_CONFIG.BASE_URL),
    ('Enabled Days', ACTIVE_CONFIG.ENABLED_DAYS),
    ('Max Retries', ACTIVE_CONFIG.MAX_RETRIES),
    ('Page Load Timeout', f"{ACTIVE_CONFIG.PAGE_LOAD_TIMEOUT}s"),
    ('Log Level', ACTIVE_CONFIG.LOG_LEVEL),
    ('Config Directory', str(ACTIVE_CONFIG.CONFIG_DIR)),
    ('Chrome Profile Dir', str(ACTIVE_CONFIG.CHROME_PROFILE_DIR)),
]

for item, value in config_items:
    print(f"{item:20}: {value}")

# Check if today would trigger the automation
today = datetime.now().weekday()
day_names = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
enabled = today in ACTIVE_CONFIG.ENABLED_DAYS

print(f"\nToday is {day_names[today]} (day {today})")
print(f"Automation {'WOULD' if enabled else 'would NOT'} run today")

# Display Chrome options
print(f"\nChrome Options:")
for option in ACTIVE_CONFIG.get_chrome_options_list():
    print(f"  ‚Ä¢ {option}")
```

## Performance Benchmarking

### Execution Time Test

```{python}
#| eval: false

import time
import sys
from pathlib import Path

def benchmark_execution():
    """Benchmark the main automation components."""
    config_dir = Path.home() / '.config' / 'neuron-automation'
    sys.path.insert(0, str(config_dir))
    
    from neuron_automation import NeuronNewsletterAutomation
    
    print("üìä Performance Benchmark")
    print("=" * 30)
    
    automation = NeuronNewsletterAutomation()
    
    # Test 1: Weekday check
    start = time.time()
    is_weekday = automation.is_weekday()
    weekday_time = time.time() - start
    print(f"Weekday check: {weekday_time:.4f}s (Result: {is_weekday})")
    
    # Test 2: Connectivity check
    start = time.time()
    connected = automation.check_internet_connectivity()
    connectivity_time = time.time() - start
    print(f"Connectivity check: {connectivity_time:.4f}s (Result: {connected})")
    
    # Test 3: WebDriver setup (headless mode)
    if connected:
        start = time.time()
        try:
            driver = automation.setup_chrome_driver()
            setup_time = time.time() - start
            print(f"WebDriver setup: {setup_time:.4f}s")
            
            # Test 4: Page load
            start = time.time()
            driver.get("https://www.theneurondaily.com/")
            load_time = time.time() - start
            print(f"Page load time: {load_time:.4f}s")
            
            # Test 5: Link extraction
            start = time.time()
            links = automation.extract_newsletter_links(driver)
            extraction_time = time.time() - start
            print(f"Link extraction: {extraction_time:.4f}s ({len(links)} links)")
            
            driver.quit()
            
            # Calculate total estimated time
            total_time = weekday_time + connectivity_time + setup_time + load_time + extraction_time
            print(f"\nTotal estimated execution time: {total_time:.2f}s")
            
        except Exception as e:
            print(f"‚ùå Benchmark failed during WebDriver test: {e}")
    else:
        print("‚ùå Cannot complete benchmark - no internet connection")

# Run benchmark
benchmark_execution()
```

## Manual Testing Commands

Here are the key commands for manual testing:

### Basic functionality test
```bash
# Test the automation manually
neuron-automation

# Test with environment variables for debugging
PYTHONPATH=~/.config/neuron-automation LOG_LEVEL=DEBUG neuron-automation
```

### System management
```bash
# Check timer status
systemctl status neuron-automation.timer

# View logs
tail -f ~/.config/neuron-automation/neuron_automation.log

# Test timer manually (force run)
sudo systemctl start neuron-automation.service

# Check service status
systemctl status neuron-automation.service
```

### Troubleshooting
```bash
# Check Chrome version
google-chrome --version

# Test Chrome in headless mode
google-chrome --headless --no-sandbox --disable-gpu --dump-dom https://www.google.com

# Check Python virtual environment
~/.config/neuron-automation/venv/bin/python --version
~/.config/neuron-automation/venv/bin/python -m pip list

# Validate configuration
~/.config/neuron-automation/venv/bin/python -c "
import sys
sys.path.insert(0, '~/.config/neuron-automation')
from config import ACTIVE_CONFIG
ACTIVE_CONFIG.validate_config()
print('Configuration is valid')
"
```

## Expected Behavior

### Normal Operation Flow

1. **Weekday Check**: Script only runs Monday-Friday
2. **Internet Check**: Verifies connectivity before proceeding
3. **Chrome Setup**: Initializes WebDriver with appropriate options
4. **Page Load**: Loads the Neuron Daily newsletter homepage
5. **Link Extraction**: Finds all article links on the page
6. **Filtering**: Removes navigation, social, and non-article links
7. **Tab Opening**: Opens main newsletter + all article links in separate tabs
8. **Completion**: Leaves browser open for user interaction

### Expected Output Examples

**Successful execution log:**
```
2025-08-19 08:00:15,123 - INFO - NeuronNewsletterAutomation initialized
2025-08-19 08:00:15,124 - INFO - Starting Neuron Newsletter automation
2025-08-19 08:00:15,125 - INFO - Today is a weekday
2025-08-19 08:00:15,126 - INFO - Internet connectivity: Available
2025-08-19 08:00:15,127 - INFO - Automation attempt 1/3
2025-08-19 08:00:15,128 - INFO - Setting up Chrome WebDriver
2025-08-19 08:00:18,245 - INFO - Chrome WebDriver setup successful
2025-08-19 08:00:18,246 - INFO - Loading newsletter page: https://www.theneurondaily.com/
2025-08-19 08:00:22,156 - INFO - Extracting newsletter links
2025-08-19 08:00:22,457 - INFO - Found 47 total links on page
2025-08-19 08:00:22,498 - INFO - Extracted 8 relevant article links
2025-08-19 08:00:23,567 - INFO - Opening main page: https://www.theneurondaily.com/
2025-08-19 08:00:26,789 - INFO - Opening tab 1/8: https://example.com/ai-breakthrough-2025
...
2025-08-19 08:00:35,234 - INFO - Successfully opened 8 tabs
2025-08-19 08:00:35,235 - INFO - Browser will remain open for user interaction
2025-08-19 08:00:35,236 - INFO - Automation completed successfully
```

**Weekend execution (should skip):**
```
2025-08-17 08:00:15,123 - INFO - NeuronNewsletterAutomation initialized
2025-08-17 08:00:15,124 - INFO - Starting Neuron Newsletter automation
2025-08-17 08:00:15,125 - INFO - Today is weekend
2025-08-17 08:00:15,126 - INFO - Not a weekday - skipping automation
```

## Troubleshooting Guide

### Common Issues and Solutions

| Issue | Symptoms | Solution |
|-------|----------|----------|
| **Chrome not starting** | WebDriver errors, browser doesn't open | `sudo apt install google-chrome-stable`, check display settings |
| **No internet connection** | Connection timeout errors | Check network, try `curl https://www.google.com` |
| **Permission denied** | Service won't start, file access errors | Fix with `sudo chown -R $USER:$USER ~/.config/neuron-automation/` |
| **Python import errors** | Module not found errors | Reinstall: `~/.config/neuron-automation/venv/bin/pip install -r ~/.config/neuron-automation/requirements.txt` |
| **Service not running** | Timer not triggering | `sudo systemctl enable neuron-automation.timer && sudo systemctl start neuron-automation.timer` |

### Advanced Diagnostics

```python
#| eval: false

import subprocess
import sys
from pathlib import Path

def run_diagnostics():
    """Run comprehensive system diagnostics."""
    print("üî¨ Advanced Diagnostics")
    print("=" * 25)
    
    # System info
    try:
        result = subprocess.run(['lsb_release', '-a'], capture_output=True, text=True)
        print("System Info:")
        print(result.stdout)
    except:
        print("Could not get system info")
    
    # Chrome version
    try:
        result = subprocess.run(['google-chrome', '--version'], capture_output=True, text=True)
        print(f"Chrome Version: {result.stdout.strip()}")
    except:
        print("Chrome not found or not working")
    
    # Python environment
    venv_python = Path.home() / '.config' / 'neuron-automation' / 'venv' / 'bin' / 'python'
    if venv_python.exists():
        try:
            result = subprocess.run([str(venv_python), '--version'], capture_output=True, text=True)
            print(f"Virtual Environment Python: {result.stdout.strip()}")
        except:
            print("Virtual environment Python not working")
    
    # Disk space
    try:
        result = subprocess.run(['df', '-h', str(Path.home())], capture_output=True, text=True)
        print("Disk Space:")
        print(result.stdout)
    except:
        print("Could not check disk space")
    
    # Display environment
    display = os.environ.get('DISPLAY', 'Not set')
    print(f"Display Environment: {display}")
    
    # Process check
    try:
        result = subprocess.run(['pgrep', '-f', 'chrome'], capture_output=True, text=True)
        if result.stdout:
            print("Chrome processes running:")
            print(result.stdout)
        else:
            print("No Chrome processes found")
    except:
        print("Could not check Chrome processes")

# Run diagnostics
run_diagnostics()
```

## Customization Examples

### Example 1: Change Schedule to 7:30 AM

```bash
# Edit the timer
sudo systemctl edit neuron-automation.timer

# Add this content:
# [Timer]
# OnCalendar=Mon,Tue,Wed,Thu,Fri *-*-* 07:30:00

# Reload and restart
sudo systemctl daemon-reload
sudo systemctl restart neuron-automation.timer
```

### Example 2: Add Weekend Support

Edit `~/.config/neuron-automation/config.py`:

```python
# Change this line:
ENABLED_DAYS = [0, 1, 2, 3, 4]  # Monday through Friday

# To this:
ENABLED_DAYS = [0, 1, 2, 3, 4, 5, 6]  # Every day
```

### Example 3: Run in Headless Mode

Edit `~/.config/neuron-automation/config.py`:

```python
CHROME_OPTIONS = [
    "--headless",           # Add this line
    "--no-sandbox",
    "--disable-dev-shm-usage", 
    "--disable-gpu",
    "--window-size=1920,1080",
]
```

## Monitoring and Maintenance

### Log Rotation Setup

```bash
# Create logrotate configuration
sudo tee /etc/logrotate.d/neuron-automation << 'EOF'
/home/*/.config/neuron-automation/neuron_automation.log {
    daily
    rotate 7
    compress
    delaycompress
    missingok
    notifempty
    copytruncate
}
EOF
```

### Health Check Script

```python
#| eval: false

#!/usr/bin/env python3
"""Health check script for Neuron automation."""

import subprocess
import sys
from pathlib import Path
from datetime import datetime, timedelta

def health_check():
    """Perform health check of the automation system."""
    issues = []
    
    # Check if service is enabled
    try:
        result = subprocess.run(
            ['systemctl', 'is-enabled', 'neuron-automation.timer'], 
            capture_output=True, text=True
        )
        if result.returncode != 0:
            issues.append("Timer is not enabled")
    except:
        issues.append("Could not check timer status")
    
    # Check recent logs for errors
    log_file = Path.home() / '.config' / 'neuron-automation' / 'neuron_automation.log'
    if log_file.exists():
        try:
            with open(log_file, 'r') as f:
                recent_logs = f.readlines()[-100:]  # Last 100 lines
            
            error_count = sum(1 for line in recent_logs if 'ERROR' in line)
            if error_count > 5:
                issues.append(f"Many recent errors in logs: {error_count}")
                
        except Exception as e:
            issues.append(f"Could not read log file: {e}")
    else:
        issues.append("Log file does not exist")
    
    # Check Chrome driver
    try:
        venv_python = Path.home() / '.config' / 'neuron-automation' / 'venv' / 'bin' / 'python'
        result = subprocess.run([
            str(venv_python), '-c', 
            'from webdriver_manager.chrome import ChromeDriverManager; print("OK")'
        ], capture_output=True, text=True, timeout=30)
        
        if result.returncode != 0:
            issues.append("Chrome driver check failed")
    except subprocess.TimeoutExpired:
        issues.append("Chrome driver check timed out")
    except:
        issues.append("Could not test Chrome driver")
    
    # Report results
    if not issues:
        print("‚úÖ Health check passed - all systems operational")
        return 0
    else:
        print("‚ö†Ô∏è Health check found issues:")
        for issue in issues:
            print(f"  ‚Ä¢ {issue}")
        return 1

if __name__ == "__main__":
    sys.exit(health_check())
```

## Conclusion

This automation system provides a robust, well-tested solution for automatically opening the Neuron Daily newsletter with all article links every weekday morning. The comprehensive error handling, logging, and configuration options make it suitable for long-term reliable operation on Ubuntu systems.

Key strengths:
- **Reliability**: Multiple retry mechanisms and comprehensive error handling
- **Flexibility**: Easily configurable for different schedules and behaviors
- **Integration**: Seamless integration with Ubuntu's systemd for automatic startup
- **Maintenance**: Detailed logging and diagnostic tools for troubleshooting
- **Performance**: Optimized for minimal resource usage and fast execution

For ongoing maintenance, monitor the logs regularly and run the health check script weekly to ensure continued operation.