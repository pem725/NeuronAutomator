{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Neuron Daily Newsletter Automation","text":"<ul> <li> <p> Smart Automation</p> <p>Multiple scheduled runs with intelligent change detection ensure you never miss a newsletter, regardless of publication time.</p> <p> Getting started</p> </li> <li> <p> Link Management</p> <p>Advanced blacklist system prevents duplicate reading and tracks analytics. Go back in time to restore content.</p> <p> Features</p> </li> <li> <p> Cross-Platform</p> <p>Works seamlessly on Linux, macOS, and Windows with automatic system integration and scheduling.</p> <p> Configuration</p> </li> <li> <p> Professional Grade</p> <p>Comprehensive logging, error recovery, and Chrome browser integration make this enterprise-ready.</p> <p> Reference</p> </li> </ul>"},{"location":"#why-this-exists","title":"Why This Exists","text":"<p>Reading the Neuron Daily newsletter is a great way to start the day, but manually clicking through all the article links takes time. This automation opens everything at once, so you can spend your morning reading instead of clicking. </p> <p>Built collaboratively with Claude AI to solve a real daily workflow need.</p> <p>Give it a star!</p> <p>If this saves you time too, give it a  and let us know how it works for you!</p>"},{"location":"#what-it-does","title":"What It Does","text":"<p>This cross-platform automation system automatically opens the latest Neuron Daily newsletter with all article links in separate tabs every weekday morning.</p> <p>Supported Platforms:  Linux \u2022  macOS \u2022  Windows</p>"},{"location":"#key-features","title":"Key Features","text":"Smart SchedulingLink ManagementBrowser IntegrationSystem Integration <ul> <li>Multi-Run System: 4 scheduled runs (5:30, 6:00, 6:30, 7:00 AM)</li> <li>Change Detection: Prevents duplicate content opening</li> <li>Optimal Coverage: Catches newsletters regardless of publication time</li> <li>Network Resilience: Connectivity checks before running</li> </ul> <ul> <li>Advanced Blacklisting: Prevents duplicate reading</li> <li>Analytics Tracking: Monitor blacklist efficiency over time</li> <li>Time Rewind Tool: Restore previously blacklisted content</li> <li>Intelligent Filtering: Removes ads and irrelevant links</li> </ul> <ul> <li>Chrome Persistence: Tabs stay open after automation</li> <li>Profile Integration: Uses your bookmarks and extensions</li> <li>Smart Detection: Connects to existing Chrome windows</li> <li>Error Handling: Only successful runs leave browser open</li> </ul> <ul> <li>Automatic Scheduling: systemd/launchd/Task Scheduler</li> <li>Easy Installation: pip install or platform installers</li> <li>Comprehensive Logging: Detailed logs for troubleshooting</li> <li>Configuration: Easily customizable settings</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Get up and running in under 2 minutes:</p> pip InstallManual InstallTest Run <pre><code>pip install neuron-automation\nneuron-automation --setup\n</code></pre> <pre><code>git clone https://github.com/pem725/NeuronAutomator.git\ncd NeuronAutomator\n./installers/install_linux.sh  # or install_macos.sh / install_windows.ps1\n</code></pre> <pre><code>neuron-automation\n</code></pre> <p>This opens Chrome with the newsletter and all article tabs.</p>"},{"location":"#how-it-works","title":"How It Works","text":"<p>The automation uses a sophisticated approach that combines multiple scheduled runs with intelligent content detection:</p> <pre><code>graph LR\n    A[5:30 AM] --&gt; B{New Content?}\n    B --&gt;|Yes| C[Open Tabs]\n    B --&gt;|No| D[Skip]\n\n    E[6:00 AM] --&gt; F{Changed Since 5:30?}\n    F --&gt;|Yes| G[Open New Tabs]\n    F --&gt;|No| H[Skip]\n\n    I[6:30 AM] --&gt; J{Changed Since Last?}\n    J --&gt;|Yes| K[Open New Tabs]\n    J --&gt;|No| L[Skip]\n\n    M[7:00 AM] --&gt; N{Final Check}\n    N --&gt;|Yes| O[Open New Tabs]\n    N --&gt;|No| P[Done for Day]</code></pre> <p>Result: Perfect coverage with zero redundancy \u2728</p>"},{"location":"#next-steps","title":"Next Steps","text":"<ul> <li> <p>Install the System</p> <p>Choose your installation method and get automated newsletter delivery set up in minutes.</p> <p> Installation Guide</p> </li> <li> <p>Explore Features</p> <p>Learn about the smart scheduling system, link management, and time rewind capabilities.</p> <p> Feature Overview</p> </li> <li> <p>Configure Settings</p> <p>Customize the automation to match your reading preferences and schedule.</p> <p> Configuration</p> </li> <li> <p>Get Help</p> <p>Find troubleshooting tips, command references, and contribution guidelines.</p> <p> Support</p> </li> </ul>"},{"location":"#neuron-daily-newsletter-automation_1","title":"Neuron Daily Newsletter Automation","text":"<p>Why This Exists: Reading the Neuron Daily newsletter is a great way to start the day, but manually clicking through all the article links takes time. This automation opens everything at once, so you can spend your morning reading instead of clicking. Built collaboratively with Claude AI to solve a real daily workflow need.</p> <p>If this saves you time too, give it a \u2b50 and let us know how it works for you! </p> <p>Cross-platform automation system that automatically opens the latest Neuron Daily newsletter with all article links in separate tabs every weekday morning.</p> <p>Supported Platforms: Linux, macOS, Windows</p>"},{"location":"features/","title":"Features Overview","text":"<p>Neuron Daily Newsletter Automation is packed with intelligent features designed to streamline your morning routine and enhance your reading experience.</p>"},{"location":"features/#core-features","title":"Core Features","text":"<ul> <li> <p> Smart Multi-Run System</p> <p>Multiple scheduled runs with intelligent change detection ensure perfect newsletter coverage without redundancy.</p> <p> Learn more</p> </li> <li> <p> Advanced Link Management</p> <p>Sophisticated blacklist system prevents duplicate reading and provides detailed analytics on your reading patterns.</p> <p> Link Management</p> </li> <li> <p> Time Rewind Tool</p> <p>Go back in time to restore previously blacklisted content for re-learning and experimentation.</p> <p> Time Rewind</p> </li> <li> <p> Chrome Integration</p> <p>Seamless browser integration with persistence, profile support, and intelligent window management.</p> <p> Browser Integration</p> </li> </ul>"},{"location":"features/#technical-excellence","title":"Technical Excellence","text":""},{"location":"features/#robust-error-handling","title":"Robust Error Handling","text":"<ul> <li>Network Resilience: Automatic connectivity checks before running</li> <li>Retry Mechanisms: Configurable retry attempts for failed operations  </li> <li>Graceful Degradation: Continues working even when some features fail</li> <li>Comprehensive Logging: Detailed logs for troubleshooting and monitoring</li> </ul>"},{"location":"features/#intelligent-automation","title":"Intelligent Automation","text":"<ul> <li>Content Change Detection: Prevents opening duplicate newsletters</li> <li>Publication Time Adaptation: Catches newsletters regardless of when they're published</li> <li>Smart Filtering: Removes advertisements and irrelevant links automatically</li> <li>Browser State Management: Maintains tabs only when automation succeeds</li> </ul>"},{"location":"features/#data-management","title":"Data Management","text":"<ul> <li>SQLite Storage: Efficient local database for link tracking and analytics</li> <li>Backup &amp; Restore: Built-in database backup and restoration capabilities</li> <li>Data Analytics: Track blacklist efficiency and reading patterns over time</li> <li>Privacy-First: All data stored locally, never transmitted externally</li> </ul>"},{"location":"features/#platform-support","title":"Platform Support","text":"LinuxmacOSWindows <ul> <li>Ubuntu 18.04+ / Debian 10+ </li> <li>systemd Integration: Native service and timer support</li> <li>Package Managers: APT package installation for dependencies</li> <li>Desktop Environment: X11 support for Chrome GUI</li> </ul> <ul> <li>macOS 10.14+ (Mojave and later)</li> <li>launchd Integration: Native scheduling daemon support</li> <li>Homebrew Support: Automatic dependency installation</li> <li>Universal Binary: Works on Intel and Apple Silicon</li> </ul> <ul> <li>Windows 10+ (Windows 11 recommended)</li> <li>Task Scheduler: Native Windows scheduling integration</li> <li>PowerShell Support: Advanced installation and management scripts</li> <li>User Account Control: Proper privilege escalation handling</li> </ul>"},{"location":"features/#installation-options","title":"Installation Options","text":"Method Best For Setup Time Maintenance pip install Python users 2-3 minutes Automatic updates Manual install Full control 5-10 minutes Manual updates Docker Containerization 3-5 minutes Container updates"},{"location":"features/#configuration-flexibility","title":"Configuration Flexibility","text":""},{"location":"features/#easy-configuration","title":"Easy Configuration","text":"<ul> <li>YAML/Python Config: Human-readable configuration files</li> <li>Environment Variables: Override settings via environment</li> <li>Command-Line Options: Quick temporary configuration changes</li> <li>Hot Reload: Some settings apply without restart</li> </ul>"},{"location":"features/#customization-options","title":"Customization Options","text":"<ul> <li>Schedule Modification: Adjust automation timing</li> <li>Link Filtering: Custom patterns for skip/include logic</li> <li>Browser Options: Headless mode, custom Chrome flags</li> <li>Logging Levels: From minimal to debug verbosity</li> </ul>"},{"location":"features/#monitoring-analytics","title":"Monitoring &amp; Analytics","text":""},{"location":"features/#built-in-analytics","title":"Built-in Analytics","text":"<pre><code># View comprehensive statistics\nneuron-automation --stats\n\n# Recent blacklist activity\nneuron-automation --recent-blacklisted 10\n\n# System health check\nneuron-automation --health-check\n</code></pre>"},{"location":"features/#logging-system","title":"Logging System","text":"<ul> <li>Structured Logging: JSON-formatted logs for parsing</li> <li>Log Rotation: Automatic cleanup of old log files</li> <li>Multiple Log Levels: DEBUG, INFO, WARNING, ERROR</li> <li>Performance Metrics: Timing data for optimization</li> </ul>"},{"location":"features/#security-privacy","title":"Security &amp; Privacy","text":""},{"location":"features/#security-features","title":"Security Features","text":"<ul> <li>Local-Only Processing: No data sent to external services</li> <li>Secure Chrome Profile: Uses your existing browser profile safely</li> <li>Permission Management: Minimal required system permissions</li> <li>Process Isolation: Automation runs in isolated environment</li> </ul>"},{"location":"features/#privacy-protection","title":"Privacy Protection","text":"<ul> <li>No Telemetry: Zero data collection or transmission</li> <li>Local Database: All tracking data stored locally</li> <li>Browser Persistence: Respects your existing Chrome sessions</li> <li>Optional Features: All tracking features can be disabled</li> </ul>"},{"location":"features/#performance-characteristics","title":"Performance Characteristics","text":"Metric Typical Value Peak Value Memory Usage 50-100MB 200MB CPU Usage &lt;5% average 20% during startup Disk Space 50MB 100MB with logs Network &lt;1MB per run 5MB with full newsletter Startup Time 5-10 seconds 30 seconds worst case"},{"location":"features/#integration-capabilities","title":"Integration Capabilities","text":""},{"location":"features/#command-line-interface","title":"Command-Line Interface","text":"<ul> <li>Rich CLI: Comprehensive command-line interface</li> <li>Scriptable: Easy integration with other automation tools</li> <li>Exit Codes: Proper exit codes for monitoring systems</li> <li>JSON Output: Machine-readable output formats available</li> </ul>"},{"location":"features/#external-integration","title":"External Integration","text":"<ul> <li>Webhook Support: Trigger external systems on events</li> <li>File Watching: Monitor configuration changes</li> <li>Signal Handling: Graceful shutdown and restart</li> <li>Environment Detection: Adapts behavior based on environment</li> </ul>"},{"location":"features/#next-steps","title":"Next Steps","text":"<p>Ready to dive deeper into specific features?</p> <ul> <li> <p>Smart Scheduling</p> <p>Learn how the multi-run system ensures perfect newsletter coverage.</p> <p> Smart Scheduling</p> </li> <li> <p>Link Management</p> <p>Understand the blacklist system and analytics capabilities.</p> <p> Link Management</p> </li> <li> <p>Configuration</p> <p>Customize the automation to match your preferences.</p> <p> Configuration</p> </li> <li> <p>Installation</p> <p>Get started with your preferred installation method.</p> <p> Installation</p> </li> </ul>"},{"location":"features/#neuron-daily-newsletter-automation","title":"Neuron Daily Newsletter Automation","text":"<p>Why This Exists: Reading the Neuron Daily newsletter is a great way to start the day, but manually clicking through all the article links takes time. This automation opens everything at once, so you can spend your morning reading instead of clicking. Built collaboratively with Claude AI to solve a real daily workflow need.</p> <p>If this saves you time too, give it a \u2b50 and let us know how it works for you! </p> <p>Cross-platform automation system that automatically opens the latest Neuron Daily newsletter with all article links in separate tabs every weekday morning.</p> <p>Supported Platforms: Linux, macOS, Windows</p>"},{"location":"features/time-rewind/","title":"Time Rewind Tool","text":"<p>The Time Rewind Tool is one of the most innovative features of Neuron Daily Newsletter Automation. It allows you to \"go back in time\" and restore previously blacklisted links, making them available for reading again.</p> <p>Perfect for Learning Experiments</p> <p>Use the Time Rewind Tool to test how re-introducing content affects your learning retention, or to recover from accidental over-blacklisting.</p>"},{"location":"features/time-rewind/#how-it-works","title":"How It Works","text":"<p>The Time Rewind Tool manipulates your local blacklist database to restore links that were blacklisted within a specified time period. When you \"rewind\" X days, all links blacklisted in the last X days become available again.</p> <pre><code>graph LR\n    A[Current State] --&gt; B[Select Days]\n    B --&gt; C[Preview Changes]\n    C --&gt; D{Confirm?}\n    D --&gt;|Yes| E[Update Database]\n    D --&gt;|No| F[Cancel]\n    E --&gt; G[Backup Created]\n    G --&gt; H[Links Restored]\n    H --&gt; I[Available for Reading]</code></pre>"},{"location":"features/time-rewind/#quick-examples","title":"Quick Examples","text":""},{"location":"features/time-rewind/#basic-rewind-commands","title":"Basic Rewind Commands","text":"Preview Mode (Safe)Actual RewindStandalone Tool <pre><code># Preview what a 7-day rewind would restore\nneuron-automation --rewind-preview 7\n\n# See what would be restored from last 3 days\nneuron-automation --rewind-preview 3\n\n# Preview with detailed information\nneuron-automation --rewind-preview 5 --verbose\n</code></pre> <pre><code># Restore links blacklisted in the last 5 days\nneuron-automation --rewind 5\n\n# Restore with automatic backup\nneuron-automation --rewind 7 --backup\n\n# Restore and show detailed results\nneuron-automation --rewind 3 --verbose\n</code></pre> <pre><code># Use the dedicated blacklist-rewind tool\nblacklist-rewind --preview 7\nblacklist-rewind --rewind 5\nblacklist-rewind --stats\nblacklist-rewind --backup\n</code></pre>"},{"location":"features/time-rewind/#viewing-recent-activity","title":"Viewing Recent Activity","text":"<pre><code># Show recently blacklisted content (last 10 items)\nneuron-automation --recent-blacklisted 10\n\n# Show blacklisted content from last 7 days\nneuron-automation --recent-blacklisted 20 --days 7\n\n# Export recent blacklist data\nneuron-automation --recent-blacklisted --export blacklist_export.json\n</code></pre>"},{"location":"features/time-rewind/#use-cases","title":"Use Cases","text":""},{"location":"features/time-rewind/#learning-experiments","title":"Learning Experiments","text":"<p>Test different content exposure patterns to optimize your learning:</p> <pre><code># Week 1: Read normally, let blacklist build up\nneuron-automation\n\n# Week 2: Restore last week's content for reinforcement\nneuron-automation --rewind 7\n\n# Week 3: Compare retention with/without re-exposure\n</code></pre>"},{"location":"features/time-rewind/#content-review","title":"Content Review","text":"<p>Bring back important articles for deeper study:</p> <pre><code># Find articles blacklisted in the last 3 days\nneuron-automation --recent-blacklisted 10 --days 3\n\n# Restore them for re-reading\nneuron-automation --rewind 3\n\n# Next automation run will include these articles again\n</code></pre>"},{"location":"features/time-rewind/#pattern-testing","title":"Pattern Testing","text":"<p>Experiment with different blacklist cycles:</p> <pre><code># Test 1-week cycle\nneuron-automation --rewind 7\n\n# Test 2-week cycle  \nneuron-automation --rewind 14\n\n# Compare reading variety and retention\n</code></pre>"},{"location":"features/time-rewind/#recovery-operations","title":"Recovery Operations","text":"<p>Recover from accidental over-blacklisting:</p> <pre><code># Check what was blacklisted recently\nneuron-automation --recent-blacklisted 20\n\n# Restore everything from last 2 days if too aggressive\nneuron-automation --rewind 2\n\n# Create backup before major changes\nneuron-automation --rewind 10 --backup\n</code></pre>"},{"location":"features/time-rewind/#advanced-features","title":"Advanced Features","text":""},{"location":"features/time-rewind/#backup-management","title":"Backup Management","text":"<p>The Time Rewind Tool includes comprehensive backup capabilities:</p> <pre><code># Create manual backup before major changes\nblacklist-rewind --backup\n\n# List available backups\nblacklist-rewind --list-backups\n\n# Restore from specific backup\nblacklist-rewind --restore-backup 2025-01-15_10-30-45\n\n# Clean old backups (keep last 10)\nblacklist-rewind --cleanup-backups 10\n</code></pre>"},{"location":"features/time-rewind/#analytics-integration","title":"Analytics Integration","text":"<p>Track your rewind usage patterns:</p> <pre><code># View rewind history and statistics\nblacklist-rewind --stats\n\n# Show impact of recent rewinds\nblacklist-rewind --rewind-impact 7\n\n# Export usage analytics\nblacklist-rewind --export-analytics rewind_stats.json\n</code></pre>"},{"location":"features/time-rewind/#selective-rewind","title":"Selective Rewind","text":"<p>Target specific types of content:</p> <pre><code># Rewind only links from specific domains\nblacklist-rewind --rewind 7 --domain \"techcrunch.com\"\n\n# Rewind links matching patterns\nblacklist-rewind --rewind 5 --pattern \"*artificial-intelligence*\"\n\n# Rewind by blacklist reason\nblacklist-rewind --rewind 7 --reason \"duplicate\"\n</code></pre>"},{"location":"features/time-rewind/#configuration-options","title":"Configuration Options","text":""},{"location":"features/time-rewind/#global-settings","title":"Global Settings","text":"<p>Configure rewind behavior in <code>~/.config/neuron-automation/config.py</code>:</p> <pre><code># Time Rewind Configuration\nTIME_REWIND_CONFIG = {\n    'default_backup': True,           # Always create backups\n    'backup_retention_days': 30,      # Keep backups for 30 days\n    'max_rewind_days': 90,           # Maximum rewind period\n    'confirmation_required': True,    # Ask for confirmation\n    'verbose_output': False,         # Detailed output by default\n}\n\n# Backup Configuration\nBACKUP_CONFIG = {\n    'backup_directory': '~/.config/neuron-automation/backups/',\n    'backup_filename_format': 'backup_%Y-%m-%d_%H-%M-%S.sqlite',\n    'auto_cleanup': True,\n    'max_backups': 20,\n}\n</code></pre>"},{"location":"features/time-rewind/#command-line-overrides","title":"Command-Line Overrides","text":"<p>Override configuration via command-line options:</p> <pre><code># Disable confirmation prompts\nneuron-automation --rewind 5 --no-confirm\n\n# Force backup even if disabled in config\nneuron-automation --rewind 7 --force-backup\n\n# Use custom backup location\nneuron-automation --rewind 5 --backup-dir /custom/path/\n</code></pre>"},{"location":"features/time-rewind/#safety-features","title":"Safety Features","text":""},{"location":"features/time-rewind/#automatic-backups","title":"Automatic Backups","text":"<p>By default, the Time Rewind Tool creates backups before making changes:</p> <pre><code># Backup location: ~/.config/neuron-automation/backups/\n# Filename format: rewind_backup_2025-01-15_10-30-45.sqlite\n</code></pre>"},{"location":"features/time-rewind/#confirmation-prompts","title":"Confirmation Prompts","text":"<p>Interactive confirmation prevents accidental changes:</p> <pre><code>Time Rewind Preview for 7 days:\n\nLinks to be restored: 23 items\nDate range: 2025-01-08 to 2025-01-15\nEstimated impact: 23 additional links in next run\n\nAre you sure you want to proceed? [y/N]: \n</code></pre>"},{"location":"features/time-rewind/#validation-checks","title":"Validation Checks","text":"<p>The tool validates all operations before execution:</p> <ul> <li>\u2705 Database integrity checks</li> <li>\u2705 Date range validation  </li> <li>\u2705 Backup space availability</li> <li>\u2705 Permission verification</li> <li>\u2705 Configuration validation</li> </ul>"},{"location":"features/time-rewind/#database-schema","title":"Database Schema","text":"<p>Understanding the underlying data structure:</p> <pre><code>-- Links table with blacklist tracking\nCREATE TABLE links (\n    id INTEGER PRIMARY KEY,\n    url TEXT UNIQUE NOT NULL,\n    url_hash TEXT UNIQUE NOT NULL,\n    first_seen DATE NOT NULL,\n    last_seen DATE NOT NULL,\n    is_blacklisted BOOLEAN DEFAULT FALSE,\n    blacklisted_date DATE,\n    blacklist_reason TEXT,\n    times_opened INTEGER DEFAULT 0\n);\n\n-- Rewind operations log\nCREATE TABLE rewind_history (\n    id INTEGER PRIMARY KEY,\n    rewind_date DATE NOT NULL,\n    days_rewound INTEGER NOT NULL,\n    links_affected INTEGER NOT NULL,\n    backup_created TEXT,\n    operation_type TEXT\n);\n</code></pre>"},{"location":"features/time-rewind/#performance-considerations","title":"Performance Considerations","text":""},{"location":"features/time-rewind/#database-size-impact","title":"Database Size Impact","text":"Links in Database Rewind Time Backup Time Disk Usage 1,000 links &lt;1 second &lt;1 second ~50KB 10,000 links ~2 seconds ~2 seconds ~500KB 100,000 links ~5 seconds ~5 seconds ~5MB"},{"location":"features/time-rewind/#optimization-tips","title":"Optimization Tips","text":"<ol> <li>Regular Cleanup: Use <code>--cleanup-old</code> to remove ancient entries</li> <li>Selective Operations: Use filters to reduce operation scope  </li> <li>Batch Processing: Group multiple rewind operations</li> <li>Monitor Size: Check database size with <code>--stats</code></li> </ol>"},{"location":"features/time-rewind/#troubleshooting","title":"Troubleshooting","text":""},{"location":"features/time-rewind/#common-issues","title":"Common Issues","text":"<p>Database Locked</p> <p>If you get \"database is locked\" errors: <pre><code># Stop the automation service temporarily\nsudo systemctl stop neuron-automation.timer\n\n# Run the rewind operation\nneuron-automation --rewind 7\n\n# Restart the service\nsudo systemctl start neuron-automation.timer\n</code></pre></p> <p>Backup Failed</p> <p>If backup creation fails: <pre><code># Check disk space\ndf -h ~/.config/neuron-automation/\n\n# Use custom backup location\nneuron-automation --rewind 5 --backup-dir /tmp/\n\n# Disable backup if necessary\nneuron-automation --rewind 5 --no-backup\n</code></pre></p> <p>No Links to Restore</p> <p>If no links match the time period: <pre><code># Check recent blacklist activity\nneuron-automation --recent-blacklisted 20\n\n# Try a longer time period\nneuron-automation --rewind-preview 14\n\n# Check database status\nblacklist-rewind --stats\n</code></pre></p>"},{"location":"features/time-rewind/#debug-mode","title":"Debug Mode","text":"<p>Enable detailed logging for troubleshooting:</p> <pre><code># Enable debug output\nneuron-automation --rewind 5 --debug\n\n# Use standalone tool with verbose logging\nblacklist-rewind --rewind 5 --verbose --debug\n\n# Check log files\ntail -f ~/.config/neuron-automation/logs/rewind.log\n</code></pre>"},{"location":"features/time-rewind/#complete-documentation","title":"Complete Documentation","text":"<p>For comprehensive usage examples, advanced workflows, and best practices:</p> <p>\ud83d\udcd6 Full Blacklist Rewind Usage Guide </p>"},{"location":"features/time-rewind/#next-steps","title":"Next Steps","text":"<ul> <li>Configure Link Management to understand blacklist behavior</li> <li>Set up Analytics to track rewind effectiveness  </li> <li>Explore Advanced Usage for power-user features</li> </ul>"},{"location":"features/time-rewind/#neuron-daily-newsletter-automation","title":"Neuron Daily Newsletter Automation","text":"<p>Why This Exists: Reading the Neuron Daily newsletter is a great way to start the day, but manually clicking through all the article links takes time. This automation opens everything at once, so you can spend your morning reading instead of clicking. Built collaboratively with Claude AI to solve a real daily workflow need.</p> <p>If this saves you time too, give it a \u2b50 and let us know how it works for you! </p> <p>Cross-platform automation system that automatically opens the latest Neuron Daily newsletter with all article links in separate tabs every weekday morning.</p> <p>Supported Platforms: Linux, macOS, Windows</p>"},{"location":"installation/","title":"Installation Overview","text":"<p>Get Neuron Daily Newsletter Automation running on your system in just a few minutes. We support multiple installation methods to fit your preferences and technical comfort level.</p>"},{"location":"installation/#choose-your-installation-method","title":"Choose Your Installation Method","text":"pip Install (Recommended)Manual Installation <p>Best for: Most users, especially those familiar with Python</p> <ul> <li> Simplest installation process</li> <li> Automatic dependency management  </li> <li> Easy updates via pip</li> <li> Works on all platforms</li> </ul> <p>Get Started with pip </p> <p>Best for: Users who want full control or don't use Python package managers</p> <ul> <li> Complete system integration</li> <li> Platform-specific optimizations</li> <li> Includes all dependencies</li> <li> No Python knowledge required</li> </ul> <p>Manual Setup Guide </p>"},{"location":"installation/#system-requirements","title":"System Requirements","text":"<p>Before installing, ensure your system meets these minimum requirements:</p>"},{"location":"installation/#operating-systems","title":"Operating Systems","text":"Platform Minimum Version Recommended Linux Ubuntu 18.04+ / Debian 10+ Ubuntu 22.04+ macOS macOS 10.14+ (Mojave) macOS 12+ (Monterey) Windows Windows 10 Windows 11"},{"location":"installation/#software-dependencies","title":"Software Dependencies","text":"Component Minimum Version Purpose Python 3.6+ Runtime environment Chrome Latest stable Browser automation Internet Broadband Newsletter fetching <p>Automatic Installation</p> <p>Our installers will automatically install missing dependencies, including Python and Chrome if needed.</p>"},{"location":"installation/#installation-time","title":"Installation Time","text":"Method Time Required Technical Level pip install 2-3 minutes Beginner Manual install 5-10 minutes Beginner"},{"location":"installation/#what-gets-installed","title":"What Gets Installed","text":"<p>The installation process sets up:</p> <ul> <li> Core automation scripts</li> <li> Configuration files  </li> <li> Automatic scheduling (systemd/launchd/Task Scheduler)</li> <li> Virtual environment with dependencies</li> <li> Command-line tools (<code>neuron-automation</code>, <code>blacklist-rewind</code>)</li> <li> Log files and data directories</li> </ul>"},{"location":"installation/#post-installation","title":"Post-Installation","text":"<p>After installation, you can:</p> <ol> <li>Test the system: <code>neuron-automation</code></li> <li>Check version: <code>neuron-automation --version</code></li> <li>View statistics: <code>neuron-automation --stats</code></li> <li>Configure settings: Edit <code>~/.config/neuron-automation/config.py</code></li> </ol>"},{"location":"installation/#need-help","title":"Need Help?","text":"<p>If you run into issues during installation:</p> <ul> <li> Check our Troubleshooting Guide</li> <li> Report bugs on GitHub Issues</li> <li> Read the Configuration Guide for customization options</li> </ul> <p>Ready to get started? Choose your preferred installation method above!</p>"},{"location":"installation/#neuron-daily-newsletter-automation","title":"Neuron Daily Newsletter Automation","text":"<p>Why This Exists: Reading the Neuron Daily newsletter is a great way to start the day, but manually clicking through all the article links takes time. This automation opens everything at once, so you can spend your morning reading instead of clicking. Built collaboratively with Claude AI to solve a real daily workflow need.</p> <p>If this saves you time too, give it a \u2b50 and let us know how it works for you! </p> <p>Cross-platform automation system that automatically opens the latest Neuron Daily newsletter with all article links in separate tabs every weekday morning.</p> <p>Supported Platforms: Linux, macOS, Windows</p>"},{"location":"installation/manual-setup/","title":"Manual Installation","text":"<p>For users who want full control over the installation process or don't use Python package managers, manual installation provides platform-specific installers with complete system integration.</p>"},{"location":"installation/manual-setup/#platform-specific-installation","title":"Platform-Specific Installation","text":"Linux (Ubuntu/Debian)macOSWindows"},{"location":"installation/manual-setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Ubuntu 18.04+ or Debian 10+</li> <li>Internet connection</li> <li>Terminal access</li> </ul>"},{"location":"installation/manual-setup/#installation-steps","title":"Installation Steps","text":"<pre><code># 1. Clone the repository\ngit clone https://github.com/pem725/NeuronAutomator.git\ncd NeuronAutomator\n\n# 2. Make installer executable\nchmod +x installers/install_linux.sh\n\n# 3. Run the installer\n./installers/install_linux.sh\n</code></pre>"},{"location":"installation/manual-setup/#prerequisites_1","title":"Prerequisites","text":"<ul> <li>macOS 10.14+ (Mojave or later)</li> <li>Internet connection</li> <li>Terminal access</li> </ul>"},{"location":"installation/manual-setup/#installation-steps_1","title":"Installation Steps","text":"<pre><code># 1. Clone the repository\ngit clone https://github.com/pem725/NeuronAutomator.git\ncd NeuronAutomator\n\n# 2. Make installer executable\nchmod +x installers/install_macos.sh\n\n# 3. Run the installer\n./installers/install_macos.sh\n</code></pre>"},{"location":"installation/manual-setup/#prerequisites_2","title":"Prerequisites","text":"<ul> <li>Windows 10 or later</li> <li>PowerShell 5.1 or later</li> <li>Internet connection</li> </ul>"},{"location":"installation/manual-setup/#installation-steps_2","title":"Installation Steps","text":"<pre><code># 1. Clone the repository (or download ZIP)\ngit clone https://github.com/pem725/NeuronAutomator.git\ncd NeuronAutomator\n\n# 2. Set execution policy (run PowerShell as Administrator)\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\n\n# 3. Run the installer\n.\\installers\\install_windows.ps1\n</code></pre>"},{"location":"installation/manual-setup/#what-the-installer-does","title":"What the Installer Does","text":"<p>The manual installer provides complete system integration:</p>"},{"location":"installation/manual-setup/#downloads-installs","title":"Downloads &amp; Installs","text":"<ul> <li>Python 3.9+ (if not present)</li> <li>Google Chrome (if not present) </li> <li>Package managers (APT, Homebrew, Chocolatey)</li> <li>System dependencies (git, curl, etc.)</li> </ul>"},{"location":"installation/manual-setup/#sets-up-environment","title":"Sets Up Environment","text":"<ul> <li>Virtual environment with required Python packages</li> <li>Configuration directory (<code>~/.config/neuron-automation/</code>)</li> <li>Log directories with proper permissions</li> <li>Data directories for SQLite databases</li> </ul>"},{"location":"installation/manual-setup/#configures-scheduling","title":"Configures Scheduling","text":"<ul> <li>Linux: systemd service and timer files</li> <li>macOS: launchd plist configuration</li> <li>Windows: Task Scheduler entries</li> </ul>"},{"location":"installation/manual-setup/#installs-commands","title":"Installs Commands","text":"<ul> <li>neuron-automation: Main automation command</li> <li>blacklist-rewind: Time rewind tool</li> <li>System PATH: Commands available globally</li> </ul>"},{"location":"installation/manual-setup/#installation-verification","title":"Installation Verification","text":"<p>After installation, verify everything works:</p> <pre><code># Check version\nneuron-automation --version\n\n# Test the automation\nneuron-automation\n\n# Check scheduled automation status\n# Linux:\nsystemctl --user status neuron-automation.timer\n\n# macOS:\nlaunchctl list | grep neuron-automation\n\n# Windows:\nGet-ScheduledTask -TaskName \"*neuron*\"\n</code></pre>"},{"location":"installation/manual-setup/#manual-configuration","title":"Manual Configuration","text":"<p>The installer creates default configurations, but you can customize:</p>"},{"location":"installation/manual-setup/#configuration-file-location","title":"Configuration File Location","text":"<ul> <li>Linux/macOS: <code>~/.config/neuron-automation/config.py</code></li> <li>Windows: <code>%USERPROFILE%\\.config\\neuron-automation\\config.py</code></li> </ul>"},{"location":"installation/manual-setup/#key-settings-to-review","title":"Key Settings to Review","text":"<pre><code># Scheduling (change automation times)\nAUTOMATION_TIMES = [\"05:30\", \"06:00\", \"06:30\", \"07:00\"]\n\n# Days to run (0=Monday, 6=Sunday)\nENABLED_DAYS = [0, 1, 2, 3, 4]  # Weekdays only\n\n# Browser options\nCHROME_OPTIONS = [\n    \"--no-sandbox\",\n    \"--disable-dev-shm-usage\"\n]\n</code></pre>"},{"location":"installation/manual-setup/#post-installation-tasks","title":"Post-Installation Tasks","text":""},{"location":"installation/manual-setup/#1-test-browser-integration","title":"1. Test Browser Integration","text":"<pre><code># Should open Chrome with newsletter tabs\nneuron-automation\n</code></pre>"},{"location":"installation/manual-setup/#2-configure-link-management","title":"2. Configure Link Management","text":"<pre><code># View initial statistics (will be empty)\nneuron-automation --stats\n\n# Check blacklist configuration\ncat ~/.config/neuron-automation/config.py | grep BLACKLIST\n</code></pre>"},{"location":"installation/manual-setup/#3-set-up-monitoring","title":"3. Set Up Monitoring","text":"<pre><code># View logs\ntail -f ~/.config/neuron-automation/logs/neuron_automation.log\n\n# Check service status regularly\n# Linux: systemctl --user status neuron-automation.timer\n# macOS: launchctl list | grep neuron\n# Windows: Get-ScheduledTask | Where-Object {$_.TaskName -like \"*neuron*\"}\n</code></pre>"},{"location":"installation/manual-setup/#advanced-manual-setup","title":"Advanced Manual Setup","text":""},{"location":"installation/manual-setup/#custom-installation-directory","title":"Custom Installation Directory","text":"<p>If you need to install in a custom location:</p> <pre><code># Set custom directory\nexport NEURON_INSTALL_DIR=\"/opt/neuron-automation\"\n\n# Run installer with custom path\n./installers/install_linux.sh --install-dir \"$NEURON_INSTALL_DIR\"\n</code></pre>"},{"location":"installation/manual-setup/#offline-installation","title":"Offline Installation","text":"<p>For systems without internet access:</p> <ol> <li> <p>Download dependencies on connected machine:    <pre><code>pip download -r requirements.txt -d ./packages/\n</code></pre></p> </li> <li> <p>Transfer files to target machine</p> </li> <li> <p>Install offline:    <pre><code>./installers/install_linux.sh --offline --package-dir ./packages/\n</code></pre></p> </li> </ol>"},{"location":"installation/manual-setup/#enterprise-deployment","title":"Enterprise Deployment","text":"<p>For deploying across multiple systems:</p> <pre><code># Create deployment package\n./installers/create_deployment_package.sh\n\n# Deploy to multiple hosts\nfor host in server1 server2 server3; do\n    scp deployment-package.tar.gz $host:/tmp/\n    ssh $host \"cd /tmp &amp;&amp; tar -xf deployment-package.tar.gz &amp;&amp; ./install.sh\"\ndone\n</code></pre>"},{"location":"installation/manual-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/manual-setup/#permission-issues","title":"Permission Issues","text":"<pre><code># Fix file permissions\nchmod -R 755 ~/.config/neuron-automation/\nchown -R $USER:$USER ~/.config/neuron-automation/\n\n# Fix executable permissions\nchmod +x /usr/local/bin/neuron-automation\nchmod +x /usr/local/bin/blacklist-rewind\n</code></pre>"},{"location":"installation/manual-setup/#service-registration-issues","title":"Service Registration Issues","text":"LinuxmacOSWindows <pre><code># Reload systemd daemon\nsystemctl --user daemon-reload\n\n# Check service file\nsystemctl --user cat neuron-automation.service\n\n# Manual service start\nsystemctl --user start neuron-automation.service\n</code></pre> <pre><code># Load launch agent manually\nlaunchctl load ~/Library/LaunchAgents/com.neuron-automation.plist\n\n# Check plist syntax\nplutil -lint ~/Library/LaunchAgents/com.neuron-automation.plist\n\n# View agent status\nlaunchctl print gui/$(id -u)/com.neuron-automation\n</code></pre> <pre><code># Check Task Scheduler manually\nGet-ScheduledTask -TaskName \"NeuronAutomation*\" | Get-ScheduledTaskInfo\n\n# Register task manually\nRegister-ScheduledTask -Xml (Get-Content \"task-definition.xml\" | Out-String) -TaskName \"NeuronAutomation\"\n</code></pre>"},{"location":"installation/manual-setup/#dependency-issues","title":"Dependency Issues","text":"<pre><code># Check Python installation\npython3 --version\nwhich python3\n\n# Check Chrome installation\ngoogle-chrome --version\nwhich google-chrome\n\n# Reinstall Python packages\n~/.config/neuron-automation/venv/bin/pip install -r requirements.txt --force-reinstall\n</code></pre>"},{"location":"installation/manual-setup/#uninstalling","title":"Uninstalling","text":"<p>To completely remove the manual installation:</p> LinuxmacOSWindows <pre><code># Stop and disable services\nsystemctl --user stop neuron-automation.timer\nsystemctl --user disable neuron-automation.timer\n\n# Remove files\nrm -rf ~/.config/neuron-automation\nsudo rm /usr/local/bin/neuron-automation\nsudo rm /usr/local/bin/blacklist-rewind\nsudo rm ~/.config/systemd/user/neuron-automation.*\n\n# Reload systemd\nsystemctl --user daemon-reload\n</code></pre> <pre><code># Unload launch agent\nlaunchctl unload ~/Library/LaunchAgents/com.neuron-automation.plist\n\n# Remove files\nrm -rf ~/.config/neuron-automation\nsudo rm /usr/local/bin/neuron-automation  \nsudo rm /usr/local/bin/blacklist-rewind\nrm ~/Library/LaunchAgents/com.neuron-automation.plist\n</code></pre> <pre><code># Remove scheduled tasks\nUnregister-ScheduledTask -TaskName \"NeuronAutomation*\" -Confirm:$false\n\n# Remove files\nRemove-Item -Recurse -Force ~/.config/neuron-automation\nRemove-Item C:\\Windows\\System32\\neuron-automation.bat\nRemove-Item C:\\Windows\\System32\\blacklist-rewind.bat\n</code></pre> <p>Next: Configure your installation to customize behavior and scheduling.</p>"},{"location":"installation/manual-setup/#neuron-daily-newsletter-automation","title":"Neuron Daily Newsletter Automation","text":"<p>Why This Exists: Reading the Neuron Daily newsletter is a great way to start the day, but manually clicking through all the article links takes time. This automation opens everything at once, so you can spend your morning reading instead of clicking. Built collaboratively with Claude AI to solve a real daily workflow need.</p> <p>If this saves you time too, give it a \u2b50 and let us know how it works for you! </p> <p>Cross-platform automation system that automatically opens the latest Neuron Daily newsletter with all article links in separate tabs every weekday morning.</p> <p>Supported Platforms: Linux, macOS, Windows</p>"},{"location":"installation/pip-install/","title":"pip Install (Recommended)","text":"<p>The fastest and easiest way to install Neuron Daily Newsletter Automation. Perfect for users familiar with Python package management.</p>"},{"location":"installation/pip-install/#quick-installation","title":"Quick Installation","text":"Linux/macOSWindows <pre><code># Install the package\npip install neuron-automation\n\n# Set up system integration\nneuron-automation --setup\n\n# Test the installation\nneuron-automation\n</code></pre> <pre><code># Install the package\npip install neuron-automation\n\n# Set up system integration (run as Administrator)\nneuron-automation --setup\n\n# Test the installation\nneuron-automation\n</code></pre> <p>Installation Complete!</p> <p>If the test run opens Chrome with newsletter tabs, you're all set! The system will now run automatically every weekday morning.</p>"},{"location":"installation/pip-install/#what-happens-during-setup","title":"What Happens During Setup","text":"<p>The <code>--setup</code> command performs platform-specific system integration:</p>"},{"location":"installation/pip-install/#linux-setup","title":"Linux Setup","text":"<ul> <li>Downloads and runs the official Linux installer</li> <li>Installs Chrome if not present</li> <li>Creates systemd service and timer files</li> <li>Sets up automatic scheduling for weekday mornings</li> <li>Configures logging and data directories</li> </ul>"},{"location":"installation/pip-install/#macos-setup","title":"macOS Setup","text":"<ul> <li>Downloads and runs the official macOS installer</li> <li>Installs Chrome via Homebrew if needed</li> <li>Creates launchd plist files for scheduling</li> <li>Sets up user-space automation (no sudo required)</li> <li>Configures proper file permissions</li> </ul>"},{"location":"installation/pip-install/#windows-setup","title":"Windows Setup","text":"<ul> <li>Downloads and runs the official Windows installer</li> <li>Installs Chrome if not present</li> <li>Creates Task Scheduler entries</li> <li>Sets up Windows service integration</li> <li>Configures proper registry entries</li> </ul>"},{"location":"installation/pip-install/#installation-locations","title":"Installation Locations","text":"<p>After installation, files are organized as follows:</p> LinuxmacOSWindows <pre><code>~/.config/neuron-automation/\n\u251c\u2500\u2500 neuron_automation.py      # Main automation script\n\u251c\u2500\u2500 config.py                 # Configuration file\n\u251c\u2500\u2500 link_manager.py           # Link management system\n\u251c\u2500\u2500 blacklist_rewind.py       # Time rewind tool\n\u251c\u2500\u2500 venv/                     # Virtual environment\n\u251c\u2500\u2500 data/                     # SQLite databases\n\u2514\u2500\u2500 logs/                     # Application logs\n\n/usr/local/bin/\n\u251c\u2500\u2500 neuron-automation         # Command wrapper\n\u2514\u2500\u2500 blacklist-rewind          # Rewind tool wrapper\n\n/etc/systemd/system/\n\u251c\u2500\u2500 neuron-automation.service # Systemd service\n\u2514\u2500\u2500 neuron-automation.timer   # Scheduling timer\n</code></pre> <pre><code>~/.config/neuron-automation/\n\u251c\u2500\u2500 neuron_automation.py      # Main automation script  \n\u251c\u2500\u2500 config.py                 # Configuration file\n\u251c\u2500\u2500 link_manager.py           # Link management system\n\u251c\u2500\u2500 blacklist_rewind.py       # Time rewind tool\n\u251c\u2500\u2500 venv/                     # Virtual environment\n\u251c\u2500\u2500 data/                     # SQLite databases\n\u2514\u2500\u2500 logs/                     # Application logs\n\n/usr/local/bin/\n\u251c\u2500\u2500 neuron-automation         # Command wrapper\n\u2514\u2500\u2500 blacklist-rewind          # Rewind tool wrapper\n\n~/Library/LaunchAgents/\n\u2514\u2500\u2500 com.neuron-automation.plist # Launch daemon\n</code></pre> <pre><code>%USERPROFILE%\\.config\\neuron-automation\\\n\u251c\u2500\u2500 neuron_automation.py      # Main automation script\n\u251c\u2500\u2500 config.py                 # Configuration file  \n\u251c\u2500\u2500 link_manager.py           # Link management system\n\u251c\u2500\u2500 blacklist_rewind.py       # Time rewind tool\n\u251c\u2500\u2500 venv\\                     # Virtual environment\n\u251c\u2500\u2500 data\\                     # SQLite databases\n\u2514\u2500\u2500 logs\\                     # Application logs\n\n# Task Scheduler entries created automatically\n</code></pre>"},{"location":"installation/pip-install/#verification-steps","title":"Verification Steps","text":""},{"location":"installation/pip-install/#1-check-installation","title":"1. Check Installation","text":"<pre><code># Verify the command is available\nneuron-automation --version\n\n# Check system integration status  \nneuron-automation --check-setup\n</code></pre>"},{"location":"installation/pip-install/#2-test-core-functionality","title":"2. Test Core Functionality","text":"<pre><code># Run a test automation (opens browser)\nneuron-automation\n\n# View blacklist statistics\nneuron-automation --stats\n\n# Test the time rewind tool\nneuron-automation --rewind-preview 7\n</code></pre>"},{"location":"installation/pip-install/#3-check-scheduled-automation","title":"3. Check Scheduled Automation","text":"LinuxmacOSWindows <pre><code># Check if systemd timer is active\nsystemctl --user status neuron-automation.timer\n\n# View recent automation logs\njournalctl --user -u neuron-automation.service -n 20\n</code></pre> <pre><code># Check if launch agent is loaded\nlaunchctl list | grep neuron-automation\n\n# View recent logs\ntail -20 ~/.config/neuron-automation/logs/neuron_automation.log\n</code></pre> <pre><code># Check Task Scheduler entries\nGet-ScheduledTask -TaskName \"*neuron*\"\n\n# View recent logs  \nGet-Content ~/.config/neuron-automation/logs/neuron_automation.log -Tail 20\n</code></pre>"},{"location":"installation/pip-install/#command-reference","title":"Command Reference","text":"<p>After installation, these commands are available:</p> Command Purpose <code>neuron-automation</code> Run automation manually <code>neuron-automation --setup</code> Initial system setup <code>neuron-automation --version</code> Show version info <code>neuron-automation --stats</code> Show blacklist statistics <code>neuron-automation --rewind 7</code> Restore links from 7 days ago <code>neuron-automation --recent-blacklisted 10</code> Show recently blacklisted links <code>blacklist-rewind</code> Standalone time rewind tool <code>blacklist-rewind --backup</code> Create database backup"},{"location":"installation/pip-install/#updating","title":"Updating","text":"<p>To update to the latest version:</p> <pre><code># Update the package\npip install --upgrade neuron-automation\n\n# Re-run setup to update system integration\nneuron-automation --setup\n</code></pre>"},{"location":"installation/pip-install/#uninstalling","title":"Uninstalling","text":"<p>To completely remove the installation:</p> <pre><code># Remove the package\npip uninstall neuron-automation\n\n# Clean up system integration (Linux/macOS)\nsudo rm -rf ~/.config/neuron-automation\nsudo rm /usr/local/bin/neuron-automation\nsudo rm /usr/local/bin/blacklist-rewind\n\n# Linux: Remove systemd files\nsudo systemctl disable neuron-automation.timer\nsudo rm /etc/systemd/system/neuron-automation.*\n\n# macOS: Remove launch agent\nlaunchctl unload ~/Library/LaunchAgents/com.neuron-automation.plist\nrm ~/Library/LaunchAgents/com.neuron-automation.plist\n</code></pre>"},{"location":"installation/pip-install/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/pip-install/#common-issues","title":"Common Issues","text":"<p>Permission Denied</p> <p>If you get permission errors on Linux/macOS, you may need to run the setup with sudo: <pre><code>sudo neuron-automation --setup\n</code></pre></p> <p>Chrome Not Found</p> <p>If Chrome isn't detected, install it manually first:</p> LinuxmacOSWindows <pre><code>wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -\nsudo add-apt-repository \"deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main\"\nsudo apt update &amp;&amp; sudo apt install google-chrome-stable\n</code></pre> <pre><code>brew install --cask google-chrome\n</code></pre> <p>Download from: https://www.google.com/chrome/</p> <p>Python Version</p> <p>Ensure you're using Python 3.6 or higher: <pre><code>python --version  # or python3 --version\n</code></pre></p>"},{"location":"installation/pip-install/#getting-help","title":"Getting Help","text":"<p>If installation fails:</p> <ol> <li>Check our Troubleshooting Guide</li> <li>Report issues on GitHub</li> <li>Include your OS, Python version, and error messages</li> </ol> <p>Next: Configure your settings to customize the automation behavior.</p>"},{"location":"installation/pip-install/#neuron-daily-newsletter-automation","title":"Neuron Daily Newsletter Automation","text":"<p>Why This Exists: Reading the Neuron Daily newsletter is a great way to start the day, but manually clicking through all the article links takes time. This automation opens everything at once, so you can spend your morning reading instead of clicking. Built collaboratively with Claude AI to solve a real daily workflow need.</p> <p>If this saves you time too, give it a \u2b50 and let us know how it works for you! </p> <p>Cross-platform automation system that automatically opens the latest Neuron Daily newsletter with all article links in separate tabs every weekday morning.</p> <p>Supported Platforms: Linux, macOS, Windows</p>"}]}